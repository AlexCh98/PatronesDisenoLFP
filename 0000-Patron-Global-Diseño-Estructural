# Elección de patrón de desiño estructural para el sistema global

* Status: Pendiente 
* Deciders: Alejandro Checa Folguera, Ivan Martín Sanz, Jose Luis Lavado Sánchez
* Date: 2018-11-13 


## Context and Problem Statement

Tenemos varias interfaces que tienen que ser intercomunicadas.Buscamos un patrón estructural que nos permita comunicar los servicios con cada subsistema.



## Considered Options

* Adapter
* Facade
* Proxy


## Decision Outcome

Chosen option: "Arquitectura orientada a servicios", because favorece la reutilización de código además del desarrollo en paralelo, fácil mantenimiento y mayor escalabilidad. 


## Pros and Cons of the Options

### Adapter 

La Arquitectura dirigida por eventos es un patrón de arquitectura software que promueve la producción, detección, consumo de, y reacción a eventos. Un evento puede ser definido como un cambio significativo en un estado

* Good, because Simplicidad
* Good, because Modularidad una sola modalidad para eventos diversos
* Bad, because Posibilidad de desborde
* Bad, because Potencial imprevisión de escalabilidad
* Bad, because Mal soporte de recuperacion en caso de fallo parcial

### Facade

La programación por niveles o capas es un modelo de desarrollo software en el que el objetivo primordial es la separación (desacoplamiento) de las partes que componen un sistema software. Tres niveles: capa de presentación, capa negocio, capa de datos.

* Good, because Reutilización de niveles
* Good, because Permite la estandarización
* Good, because Las dependencias se limitan a intracapas --> contencion de cambios a una o pocas capas
* Bad, because A veces no se logra la contención del cambio y se requiere una casacada de cambios entre varias capas
* Bad, because Perdidad de eficiencia y trabajo innecesario por parte de capas mas internas

### Proxy

Es un patrón estructural que tiene como propósito proporcionar un subrogado o intermediario de un objeto para controlar su acceso

* Good, because se introduce un nivel de indirección en el acceso al objeto.
* Good, because facilita otra optimización, relacionada con la creación de objetos por demanda.
* Bad, because un proxy remoto puede ocultar el hecho de que un objeto reside en otro espacio de direcciones.
* Bad, because un proxy virtual puede realizar optimizaciones, como crear objetos bajo demanda.



## Links:
* [ADR-0001](0001-Patron-PW-App-Usuario.md)
* [ADR-0002](0002-Patron-Sistemas-Estadio.md)
* [ADR-0003](0003-Patron-Gestion-Entrada-Tornos.md)
* [ADR-0004](0004-Patron-VAR.md)
* [ADR-0005](0005-Patron-Ojo-Halcon.md)
* [ADR-0006](0006-Patron-Marauder.md)

