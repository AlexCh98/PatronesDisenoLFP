# Elección de patrón de desiño estructural para el sistema global

* Status: Pendiente 
* Deciders: Alejandro Checa Folguera, Ivan Martín Sanz, Jose Luis Lavado Sánchez
* Date: 2018-11-13 


## Context and Problem Statement

Tenemos varias interfaces que tienen que ser intercomunicadas.Buscamos un patrón estructural que nos permita comunicar los servicios con cada subsistema.



## Considered Options

* Adapter
* Facade
* Proxy


## Decision Outcome

Chosen option: "Arquitectura orientada a servicios", because favorece la reutilización de código además del desarrollo en paralelo, fácil mantenimiento y mayor escalabilidad. 


## Pros and Cons of the Options

### Adapter 

Convierte la interfaz de una clase en otra interfaz que el cliente espera. El adaptador permite a las clases trabajar juntas, lo que de otra manera no podría hacerse debido a sus interfaces incompatibles.

* Good, because Permite compatibilidad entre interfaces.
* Good, because Permite encapsular laas respuestas.
* Bad, because Añade complejidad al diseño.
* Bad, because Pierde caractersticas importantes si no se implementa con objetos y clases
* Bad, because La version mas simple necesita programación orientada a objetos,.

### Facade

Se aplica el patrón fachada cuando se necesite proporcionar una interfaz simple para un subsistema complejo, o cuando se quiera estructurar varios subsistemas en capas, ya que las fachadas serían el punto de entrada a cada nivel.

* Good, because Reduce la dependencia de los subsistemas.
* Good, because Si cambia la respuesta podemos cambiar la fachada si cambiar la petición.
* Good, because El cliente no necesita saber como implenta las respuestas.
* Bad, because Si son subsistemas muy distintos puede necesitar varias fachadas lo que aumenta la complejidad.

### Proxy

Modelo-vista-controlador (MVC) es un patrón de arquitectura de software, que separa los datos y la lógica de negocio de una aplicación de su representación y el módulo encargado de gestionar los eventos y las comunicaciones. Para ello MVC propone la construcción de tres componentes distintos que son el modelo, la vista y el controlador.

* Good, because Implementación modular 
* Good, because Las vistas simpre están actualizadas.
* Good, because La modificación de una parte no afecta a las demás --> facil extensibilad y mantenimiento
* Bad, because Mayor dedicación inicial en el desarrollo.
* Bad, because Requiere la existencia de una arquitectura inicial sobre la que construir clases e interfaces.
* Bad, becasue Es orientada a objetos por lo que su implentación sumamente costosa y díficil en lenguajes no POO. 


## Links:
* [ADR-0001](0001-Patron-PW-App-Usuario.md)
* [ADR-0002](0002-Patron-Sistemas-Estadio.md)
* [ADR-0003](0003-Patron-Gestion-Entrada-Tornos.md)
* [ADR-0004](0004-Patron-VAR.md)
* [ADR-0005](0005-Patron-Ojo-Halcon.md)
* [ADR-0006](0006-Patron-Marauder.md)
